#!/usr/bin/python3
"""Base class defining attributes and classes for
all other classes
"""
import uuid
from datetime import datetime
import models


class BaseModel:
    """define attributes and methods for all classes
    """

    def __init__(self, *args, **kwargs):
        """initialize the class
            id (str) : unique id generated by uuid
            created_at (datetime) : time the instance is created
            updated_at (datetime) : time the instance is updated
       """
        if len(kwargs) > 1:
            for key, value in kwargs.items():
                if key == "id":
                    self.id = value
                elif key == "created_at":
                    self.created_at = datetime.fromisoformat(value)
                elif key == "updated_at":
                    self.updated_at = datetime.fromisoformat(value)
                elif key == "__class__":
                    continue
                else:
                    setattr(self, key, value)
        else:
            self.id = str(uuid.uuid4())
            self.created_at = datetime.now()
            self.updated_at = self.created_at
            models.storage.new(self)

    def __str__(self):
        """string representation of the class"""
        return (f"[{type(self).__name__}] ({self.id}) {self.__dict__}")

    def save(self):
        """write to storage update the updated_at instance variable"""
        self.updated_at = datetime.now()
        models.storage.save()

    def to_dict(self):
        """return a dictionary with all the keys and values in  __dict__
        also add the __class__ key and change datetime objects to iso format
        """
        inst_dict = {}
        for k, v in self.__dict__.items():
            inst_dict[k] = v
        inst_dict["__class__"] = type(self).__name__
        inst_dict['created_at'] = str(inst_dict['created_at'].isoformat())
        inst_dict['updated_at'] = str(inst_dict['updated_at'].isoformat())
        return inst_dict
